  (- (* 4.25 hours) 70))

;3
;computes the result of a specifc series(series is given)
;series-> number number -> number

(check-expect (series 4 4) 4)
(check-expect (series 2 4) 4.45)

(define (series n m)
 (cond
  [(< m n) (error "undefined")]
  [(= n m) n]
  [else
   (+
   (series n (- m 1))
   (/ (+ n m) (+ 1 m)))]))
          

;4
;calculates the repeat count of a number in a list of numbers.
;repeatCount-> list number -> number

(check-expect (repeatCount (list 3 4 5 3 7 3) 3) 3)
(check-expect (repeatCount (list 4 3 1) 5) 0)
(check-expect (repeatCount (list 9 2 8) 9) 1)

(define (repeatCount myList item)
 (cond
  [(empty? myList) 0]
  [(= item (first myList)) (+ 1 (repeatCount (rest myList) item))]
  [else (repeatCount (rest myList) item)])) 
